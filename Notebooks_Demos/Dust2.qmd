---
title: Dust_2 B Site Analysis
date: '2025-08-25'
description: Analysis of B Site of Dust 2
categories:
  - Dust_2
format:
  html: default
  ipynb:
    jupyter:
      kernelspec:
        display_name: Python
        language: python3
        name: python3
---

# Description

The demo is from [Spirit vs G2 at Blast Bounty 2025 Season 2](https://www.hltv.org/matches/2384142/g2-vs-spirit-blast-bounty-2025-season-2).

## Analysis
Package fix, can ignore for now
```{python}
#!pip install --force-reinstall --upgrade numpy awpy
# After this cell finishes, restart the kernel manually, then run the next cells.
```

Import our demo and libraries. 
```{python}
#!pip install awpy
from awpy import Demo
import os

dem = Demo("demos\g2-vs-spirit-m3-dust2.dem")
dem.parse()
dem.header
```



## Coordinate Map to correctly identify player positions 
Areas for B-Site 

Back Plat (X:77, Y:15 to X:135, Y: 83)
Single Barrel: (X:136, Y:78 to X:164, Y:106)
Double Barrels: (X:130, Y:110 to X:163, Y:140)
Second Cubby: (X:59, Y:239 to X:78, Y:263)
Close Left (X:67, Y:304 to X:94, Y:328)
Doors (X:250, Y:212 to X:295, Y:270)
Top Car Box (X:139, Y: 311 to X:157, Y:327)
B-Site (X:170, Y:80 to X:256, Y:175)
Default (X: 229, Y:151 to X:257, Y:190)
Back site Tucked (X: 234, Y:94 to X:254, Y:118) 
Window (X:243, Y: 118 to X:282, Y: 146)
Big Box B Site (X:128, Y:145 to X:171, Y: 185)
Car B-Site (X:170, Y:284 to X:255, Y:370)
Tunnel Exit (X:94, Y:326 to X: 126, Y:415)
Can add more here

Whole B-Site (X:55, Y:11 to X:392, Y:380) 

Map them and see the coordiates are correct 

```{python}
from awpy import Demo
import polars as pl

# Your B-Site area coordinates (converted from pixels to map coordinates)
def classify_b_site_position(x, y):
    # Back site Tucked (most specific first)
    if -1573 <= x <= -1496 and 1213 <= y <= 1331:
        return "Back site Tucked"

    # Single Barrel
    elif -1951 <= x <= -1843 and 1272 <= y <= 1409:
        return "Single Barrel"

    # Double Barrels
    elif -1974 <= x <= -1847 and 1105 <= y <= 1253:
        return "Double Barrels"

    # Window
    elif -1538 <= x <= -1388 and 1076 <= y <= 1213:
        return "Window"

    # Default
    elif -1592 <= x <= -1484 and 860 <= y <= 1051:
        return "Default"

    # Big Box B Site
    elif -1982 <= x <= -1816 and 885 <= y <= 1081:
        return "Big Box B Site"

    # Back Plat
    elif -2179 <= x <= -1955 and 1385 <= y <= 1718:
        return "Back Plat"

    # Doors
    elif -1511 <= x <= -1337 and 468 <= y <= 752:
        return "Doors"

    # Car B-Site
    elif -1820 <= x <= -1492 and -23 <= y <= 399:
        return "Car B-Site"

    # Tunnel Exit
    elif -2113 <= x <= -1990 and -243 <= y <= 193:
        return "Tunnel Exit"

    # Top Car Box
    elif -1940 <= x <= -1870 and 188 <= y <= 267:
        return "Top Car Box"

    # Close Left
    elif -2217 <= x <= -2113 and 183 <= y <= 301:
        return "Close Left"

    # Second Cubby
    elif -2248 <= x <= -2175 and 502 <= y <= 620:
        return "Second Cubby"

    # General B-Site (less specific)
    elif -1820 <= x <= -1488 and 934 <= y <= 1400:
        return "B-Site General"

    # Whole B-Site (broadest)
    elif -2264 <= x <= -963 and -72 <= y <= 1738:
        return "B-Site Area"

    return "Not in B-Site"

# Load your demo
dem = Demo("demos\\g2-vs-spirit-m3-dust2.dem")
dem.parse()

print("Demo loaded successfully!")
print(f"Total rounds: {dem.ticks['round_num'].max()}")

# Test for 2 rounds
print("\nTesting B-Site detection for rounds 1-2...")

detections = []
round_1_2_data = dem.ticks.filter(
    (dem.ticks["round_num"] <= 2) & 
    (dem.ticks["health"] > 0)
)

for row in round_1_2_data.iter_rows(named=True):
    x, y = row["X"], row["Y"]
    area = classify_b_site_position(x, y)

    if area != "Not in B-Site":
        detections.append({
            "tick": row["tick"],
            "round": row["round_num"],
            "player": row["name"],
            "side": row["side"],
            "area": area,
            "x": round(x),
            "y": round(y)
        })

print(f"\nFound {len(detections)} B-Site detections in rounds 1-2:")
print("-" * 70)

if detections:
    for det in detections[:25]:  # Show first 25
        print(f"Round {det['round']} | Tick {det['tick']:5} | {det['player']:12} ({det['side']:2}) | "
              f"{det['area']:18} | ({det['x']:4}, {det['y']:4})")

    if len(detections) > 25:
        print(f"... and {len(detections) - 25} more")

    # Summary
    print("\n" + "="*50)
    print("SUMMARY BY AREA")
    print("="*50)
    area_counts = {}
    for det in detections:
        area_counts[det['area']] = area_counts.get(det['area'], 0) + 1

    for area, count in sorted(area_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"{area:18}: {count:3} detections")

else:
    print("No B-Site detections found.")
    print("\nTry checking a few sample coordinates:")
    sample_coords = round_1_2_data.sample(10).select(["X", "Y", "name"]).to_dicts()
    for coord in sample_coords:
        x, y = coord["X"], coord["Y"]
        area = classify_b_site_position(x, y)
        print(f"{coord['name']:10}: ({x:6.0f}, {y:6.0f}) -> {area}")
```

Testing changes to output and player location

```{python}
from awpy import Demo
import polars as pl


#  B-Site area coordinates (converted from pixels to map coordinates)
def classify_b_site_position(x, y):
    # Back site Tucked (most specific first)
    if -1573 <= x <= -1496 and 1213 <= y <= 1331:
        return "Back site Tucked"

    # Single Barrel
    elif -1951 <= x <= -1843 and 1272 <= y <= 1409:
        return "Single Barrel"

    # Double Barrels
    elif -1974 <= x <= -1847 and 1105 <= y <= 1253:
        return "Double Barrels"

    # Window
    elif -1538 <= x <= -1388 and 1076 <= y <= 1213:
        return "Window"

    # Default
    elif -1592 <= x <= -1484 and 860 <= y <= 1051:
        return "Default"

    # Big Box B Site
    elif -1982 <= x <= -1816 and 885 <= y <= 1081:
        return "Big Box B Site"

    # Back Plat
    elif -2179 <= x <= -1955 and 1385 <= y <= 1718:
        return "Back Plat"

    # Doors
    elif -1511 <= x <= -1337 and 468 <= y <= 752:
        return "Doors"

    # Car B-Site
    elif -1820 <= x <= -1492 and -23 <= y <= 399:
        return "Car B-Site"

    # Tunnel Exit
    elif -2113 <= x <= -1990 and -243 <= y <= 193:
        return "Tunnel Exit"

    # Top Car Box
    elif -1940 <= x <= -1870 and 188 <= y <= 267:
        return "Top Car Box"

    # Close Left
    elif -2217 <= x <= -2113 and 183 <= y <= 301:
        return "Close Left"

    # Second Cubby
    elif -2248 <= x <= -2175 and 502 <= y <= 620:
        return "Second Cubby"

    # General B-Site (less specific)
    elif -1820 <= x <= -1488 and 934 <= y <= 1400:
        return "B-Site General"

    # Whole B-Site (broadest)
    elif -2264 <= x <= -963 and -72 <= y <= 1738:
        return "B-Site Area"

    return "Not in B-Site"


def is_in_b_site_area(x, y):
    """Check if coordinates are within the broad B-Site area"""
    return -2264 <= x <= -963 and -72 <= y <= 1738


# Load your demo
dem = Demo("demos\\g2-vs-spirit-m3-dust2.dem")
dem.parse()

print("Demo loaded successfully!")
print(f"Total rounds: {dem.ticks['round_num'].max()}")

# Test for 2 rounds with 32-tick intervals (0.5 seconds)
print("\nAnalyzing B-Site activity for rounds 1-2 (every 0.5 seconds)...")

# Filter data for rounds 1-2 and alive players only
round_1_2_data = dem.ticks.filter(
    (dem.ticks["round_num"] <= 2) & 
    (dem.ticks["health"] > 0)
)

# Get unique ticks and filter to every 32nd tick
all_ticks = sorted(round_1_2_data["tick"].unique())
interval_ticks = [tick for i, tick in enumerate(all_ticks) if i % 32 == 0]

print(f"\nAnalyzing {len(interval_ticks)} time intervals across rounds 1-2...")

# Collect detections for every 32nd tick
detections = []
b_site_presence = []

for tick in interval_ticks:
    tick_data = round_1_2_data.filter(pl.col("tick") == tick)

    for row in tick_data.iter_rows(named=True):
        x, y = row["X"], row["Y"]

        # Check specific B-Site positions
        area = classify_b_site_position(x, y)
        if area != "Not in B-Site":
            detections.append({
                "tick": row["tick"],
                "round": row["round_num"],
                "player": row["name"],
                "side": row["side"],
                "area": area,
                "x": round(x),
                "y": round(y),
                "time_seconds": round(tick / 64, 1)  # Convert tick to seconds (64 ticks = 1 second)
            })

        # Check broad B-Site area presence
        if is_in_b_site_area(x, y):
            b_site_presence.append({
                "tick": row["tick"],
                "round": row["round_num"],
                "player": row["name"],
                "side": row["side"],
                "x": round(x),
                "y": round(y),
                "time_seconds": round(tick / 64, 1)
            })

print(f"\nFound {len(detections)} specific B-Site position detections:")
print("=" * 80)

if detections:
    current_round = None
    for det in detections:
        if current_round != det['round']:
            current_round = det['round']
            print(f"\n--- ROUND {current_round} ---")

        print(f"Time: {det['time_seconds']:5.1f}s | {det['player']:12} ({det['side']:2}) | "
              f"{det['area']:18} | ({det['x']:4}, {det['y']:4})")

    # Summary by area
    print("\n" + "="*60)
    print("SUMMARY BY SPECIFIC AREAS")
    print("="*60)
    area_counts = {}
    for det in detections:
        area_counts[det['area']] = area_counts.get(det['area'], 0) + 1

    for area, count in sorted(area_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"{area:18}: {count:3} detections")
else:
    print("No specific B-Site position detections found.")

# Show all players in broad B-Site area
print(f"\n\nAll players in B-Site Area ({len(b_site_presence)} total detections):")
print("=" * 80)

if b_site_presence:
    current_round = None
    for presence in b_site_presence:
        if current_round != presence['round']:
            current_round = presence['round']
            print(f"\n--- ROUND {current_round} - B-SITE AREA PRESENCE ---")

        print(f"Time: {presence['time_seconds']:5.1f}s | {presence['player']:12} ({presence['side']:2}) | "
              f"B-Site Area | ({presence['x']:4}, {presence['y']:4})")

    # Summary by player and side for B-Site area
    print("\n" + "="*60)
    print("B-SITE AREA PRESENCE SUMMARY")
    print("="*60)
    player_counts = {}
    side_counts = {"CT": 0, "T": 0}

    for presence in b_site_presence:
        player_key = f"{presence['player']} ({presence['side']})"
        player_counts[player_key] = player_counts.get(player_key, 0) + 1
        side = presence['side'].upper()
        side_counts[side] += 1

    print("\nBy Player:")
    for player, count in sorted(player_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"  {player:20}: {count:3} detections")

    print("\nBy Side:")
    for side, count in side_counts.items():
        print(f"  {side:20}: {count:3} detections")

else:
    print("No players found in B-Site area.")

print("\n" + "="*80)
print("Analysis complete!")
```